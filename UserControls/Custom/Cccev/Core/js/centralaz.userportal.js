// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.CentralAZ = window.CentralAZ || {};

  CentralAZ.UserPortal = CentralAZ.UserPortal || {};

  CentralAZ.UserPortal.Presenters = CentralAZ.UserPortal.Presenters || {};

  CentralAZ.UserPortal.Models = CentralAZ.UserPortal.Models || {};

  CentralAZ.UserPortal.Views = CentralAZ.UserPortal.Views || {};

  CentralAZ.UserPortal.Routers = CentralAZ.UserPortal.Routers || {};

  CentralAZ.UserPortal.Helpers = CentralAZ.UserPortal.Helpers || {};

  CentralAZ.UserPortal.Helpers.Bootstrapper = {
    initUserInfo: function() {
      var events, personPromise;
      events = CentralAZ.UserPortal.Helpers.Events;
      personPromise = $.trafficCop('webservices/custom/cccev/core/UserPortalService.asmx/UserInfo', {
        dataType: 'json',
        contentType: 'application/json'
      });
      return personPromise.done(function(data) {
        var campusPromise, campuses, model, userInfoRouter;
        model = new CentralAZ.UserPortal.Models.User(data.d);
        campuses = new CentralAZ.UserPortal.Models.CampusCollection();
        campusPromise = campuses.fetch();
        campusPromise.done(function() {
          var campus;
          model.set({
            Campus: campuses.get(model.get('CampusID'))
          }, {
            silent: true
          });
          campus = model.get('Campus');
          return campus.set({
            selected: true
          });
        });
        CentralAZ.UserPortal.campuses = campuses;
        userInfoRouter = new CentralAZ.UserPortal.Routers.UserInfoRouter({
          ev: events,
          model: model
        });
        return Backbone.history.start();
      });
    }
  };

  CentralAZ.UserPortal.Helpers.Events = _.extend({}, Backbone.Events);

  Backbone.View.prototype.close = function() {
    this.remove();
    this.unbind();
    if (typeof this.onClose === 'function') {
      return this.onClose();
    }
  };

  Backbone.View.prototype.fromTemplate = function() {
    var _this = this;
    CentralAZ.UserPortal.Helpers.TemplateManager.get(this.template, function(tmp) {
      var html;
      html = Mustache.to_html(tmp, _this.model.toJSON());
      return _this.$el.html(html);
    });
    return this;
  };

  Backbone.View.prototype.onModelError = function(model, errors) {
    var err;
    this.ev.trigger('errors:show', model, errors);
    for (err in errors) {
      this.$el.find("[data-field='" + err + "']").addClass('error');
    }
    return this;
  };

  Backbone.sync = function(method, model) {
    var data, isPerson, methodType, modelData, path, promise;
    isPerson = model instanceof CentralAZ.UserPortal.Models.AbstractPerson;
    modelData = model.toJSON();
    methodType = 'POST';
    switch (method) {
      case 'delete':
        path = 'DeleteEmail';
        data = {
          id: model.id
        };
        break;
      case 'create':
        if (isPerson) {
          path = 'CreateFamilyMember';
          data = {
            person: modelData
          };
        } else {
          path = 'CreateEmail';
          data = {
            email: modelData
          };
        }
        break;
      case 'update':
        if (isPerson && model instanceof CentralAZ.UserPortal.Models.User) {
          path = 'UpdateUser';
          data = {
            user: modelData
          };
        } else if (isPerson && model instanceof CentralAZ.UserPortal.Models.FamilyMember) {
          path = 'UpdateFamilyMember';
          data = {
            person: modelData
          };
        } else {
          path = 'UpdateEmail';
          data = {
            email: modelData
          };
        }
        break;
      case 'read':
        path = 'UserInfo';
        data = {};
        methodType = 'GET';
        break;
      default:
        return console.log(method);
    }
    promise = $.trafficCop("webservices/custom/cccev/core/UserPortalService.asmx/" + path, {
      type: methodType,
      dataType: 'json',
      contentType: 'application/json; charset=utf-8',
      data: JSON.stringify(data)
    });
    promise.error(function(xhr, text, err) {
      console.log('Uh oh, server errorz!');
      console.log(xhr);
      console.log(text);
      return console.log(err);
    });
    return promise;
  };

  (function($) {
    var inProgress;
    inProgress = {};
    return $.trafficCop = function(url, options) {
      var i, key, reqOptions;
      reqOptions = url;
      if (arguments.length === 2) {
        reqOptions = $.extend(true, options, {
          url: url
        });
      }
      key = JSON.stringify(reqOptions);
      if (inProgress[key]) {
        for (i in {
          success: 1,
          error: 1,
          complete: 1
        }) {
          inProgress[key][i](reqOptions[i]);
        }
      } else {
        inProgress[key] = $.ajax(reqOptions).always(function() {
          return delete inProgress[key];
        });
      }
      return inProgress[key];
    };
  })(jQuery);

  CentralAZ.UserPortal.Helpers.TemplateManager = {
    templates: {},
    get: function(id, callback) {
      var promise, url,
        _this = this;
      if (this.templates[id]) {
        return callback.call(this, this.templates[id]);
      }
      url = "usercontrols/custom/cccev/core/templates/" + id + ".html";
      promise = $.trafficCop(url);
      return promise.done(function(template) {
        _this.templates[id] = template;
        return callback.call(_this, template);
      });
    }
  };

  CentralAZ.UserPortal.Models.AbstractPerson = (function(_super) {

    __extends(AbstractPerson, _super);

    function AbstractPerson() {
      return AbstractPerson.__super__.constructor.apply(this, arguments);
    }

    AbstractPerson.prototype.displayDate = function() {
      var age, birthdate, month, nulldate, today;
      birthdate = new Date(this.get('Birthdate'));
      nulldate = new Date(Date.parse('1/1/1900'));
      if (birthdate.getTime() === nulldate.getTime()) {
        return this.set({
          DisplayDate: 'Unknown',
          Age: '?'
        }, {
          silent: true
        });
      }
      this.set({
        DisplayDate: "" + (birthdate.getMonth() + 1) + "/" + (birthdate.getDate()) + "/" + (birthdate.getFullYear())
      }, {
        silent: true
      });
      today = new Date();
      age = today.getFullYear() - birthdate.getFullYear();
      month = today.getMonth() - birthdate.getMonth();
      if (month < 0 || (month === 0 && today.getDate() < birthdate.getDate())) {
        age--;
      }
      return this.set({
        Age: age
      }, {
        silent: true
      });
    };

    AbstractPerson.prototype.displayGender = function() {
      var gender;
      gender = this.get('Gender');
      return this.set({
        isMale: gender === 'Male',
        isFemale: gender === 'Female'
      }, {
        silent: true
      });
    };

    return AbstractPerson;

  })(Backbone.Model);

  CentralAZ.UserPortal.Models.Campus = (function(_super) {

    __extends(Campus, _super);

    function Campus() {
      return Campus.__super__.constructor.apply(this, arguments);
    }

    Campus.prototype.idAttribute = 'campusID';

    Campus.prototype.initialize = function(options) {
      if (options.name) {
        return this.set({
          className: options.name.toLowerCase().replace(/\ /g, '-')
        });
      }
    };

    return Campus;

  })(Backbone.Model);

  CentralAZ.UserPortal.Models.CampusCollection = (function(_super) {

    __extends(CampusCollection, _super);

    function CampusCollection() {
      return CampusCollection.__super__.constructor.apply(this, arguments);
    }

    CampusCollection.prototype.model = CentralAZ.UserPortal.Models.Campus;

    CampusCollection.prototype.comparator = function(campus) {
      return campus.get('campusID');
    };

    CampusCollection.prototype.url = function() {
      return 'webservices/custom/cccev/web2/campusservice.asmx/GetCampusList';
    };

    CampusCollection.prototype.fetch = function(options) {
      var promise,
        _this = this;
      promise = $.trafficCop(this.url(), {
        contentType: 'application/json',
        dataType: 'json'
      });
      promise.done(function(data) {
        var campus, campuses, _i, _len, _results;
        campuses = data.d;
        _results = [];
        for (_i = 0, _len = campuses.length; _i < _len; _i++) {
          campus = campuses[_i];
          _results.push(_this.add(campus));
        }
        return _results;
      });
      return promise;
    };

    return CampusCollection;

  })(Backbone.Collection);

  CentralAZ.UserPortal.Models.EmailAddress = (function(_super) {

    __extends(EmailAddress, _super);

    function EmailAddress() {
      return EmailAddress.__super__.constructor.apply(this, arguments);
    }

    EmailAddress.prototype.idAttribute = 'EmailID';

    EmailAddress.prototype.validate = function(attrs) {
      var keys, pattern;
      this.modelErrors = {};
      pattern = /^([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$/;
      if (typeof attrs.Address !== 'undefined' && (!attrs.Address || !pattern.test(attrs.Address))) {
        this.modelErrors.Address = 'Please enter a valid email address';
      }
      keys = _.keys(this.modelErrors);
      if (_.any(keys)) {
        return this.modelErrors;
      }
    };

    return EmailAddress;

  })(Backbone.Model);

  CentralAZ.UserPortal.Models.EmailAddressCollection = (function(_super) {

    __extends(EmailAddressCollection, _super);

    function EmailAddressCollection() {
      return EmailAddressCollection.__super__.constructor.apply(this, arguments);
    }

    EmailAddressCollection.prototype.model = CentralAZ.UserPortal.Models.EmailAddress;

    EmailAddressCollection.prototype.comparator = function(email) {
      return email.get('Active');
    };

    return EmailAddressCollection;

  })(Backbone.Collection);

  CentralAZ.UserPortal.Models.FamilyMember = (function(_super) {

    __extends(FamilyMember, _super);

    function FamilyMember() {
      return FamilyMember.__super__.constructor.apply(this, arguments);
    }

    FamilyMember.prototype.idAttribute = 'PersonID';

    FamilyMember.prototype.initialize = function(options) {
      if (options.Birthdate) {
        this.displayDate();
      }
      if (options.Gender) {
        return this.displayGender();
      }
    };

    FamilyMember.prototype.validate = function(attrs) {
      var keys;
      this.modelErrors = {};
      if (typeof attrs.FirstName !== 'undefined' && !attrs.FirstName) {
        this.modelErrors.FirstName = 'First name is required';
      }
      if (typeof attrs.LastName !== 'undefined' && !attrs.LastName) {
        this.modelErrors.LastName = 'Last name is required';
      }
      if (typeof attrs.Birthdate !== 'undefined' && !attrs.Birthdate) {
        this.modelErrors.Birthdate = 'Birthdate is required';
      }
      if (typeof attrs.Gender !== 'undefined' && !attrs.Gender) {
        this.modelErrors.Gender = 'Gender is required';
      }
      keys = _.keys(this.modelErrors);
      if (_.any(keys)) {
        return this.modelErrors;
      }
    };

    return FamilyMember;

  })(CentralAZ.UserPortal.Models.AbstractPerson);

  CentralAZ.UserPortal.Models.FamilyMemberCollection = (function(_super) {

    __extends(FamilyMemberCollection, _super);

    function FamilyMemberCollection() {
      return FamilyMemberCollection.__super__.constructor.apply(this, arguments);
    }

    FamilyMemberCollection.prototype.model = CentralAZ.UserPortal.Models.FamilyMember;

    FamilyMemberCollection.prototype.comparator = function(user) {
      var birthdate;
      birthdate = new Date(user.get('Birthdate'));
      return birthdate.getTime();
    };

    return FamilyMemberCollection;

  })(Backbone.Collection);

  CentralAZ.UserPortal.Models.User = (function(_super) {

    __extends(User, _super);

    function User() {
      return User.__super__.constructor.apply(this, arguments);
    }

    User.prototype.idAttribute = 'PersonID';

    User.prototype.initialize = function(options) {
      if (!options) {
        return;
      }
      if (options.Birthdate) {
        this.displayDate();
      }
      if (options.EmailAddresses) {
        this.set({
          EmailAddresses: new CentralAZ.UserPortal.Models.EmailAddressCollection(options.EmailAddresses)
        }, {
          silent: true
        });
      }
      if (options.Family) {
        this.set({
          Family: new CentralAZ.UserPortal.Models.FamilyMemberCollection(options.Family)
        }, {
          silent: true
        });
      }
      if (options.Gender) {
        return this.displayGender();
      }
    };

    User.prototype.validate = function(attrs) {
      var keys, phonePattern;
      this.modelErrors = {};
      phonePattern = /^(?:\([2-9]\d{2}\)\ ?|[2-9]\d{2}(?:\-?|\ ?))[2-9]\d{2}[- ]?\d{4}$/;
      if (typeof attrs.FirstName !== 'undefined' && !attrs.FirstName) {
        this.modelErrors.FirstName = 'Please enter your first name';
      }
      if (typeof attrs.LastName !== 'undefined' && !attrs.LastName) {
        this.modelErrors.LastName = 'Please enter your last name';
      }
      if (typeof attrs.HomePhone !== 'undefined' && (!attrs.HomePhone || !phonePattern.test(attrs.HomePhone))) {
        this.modelErrors.HomePhone = 'Please enter a valid home phone number';
      }
      if (typeof attrs.AddressLine1 !== 'undefined' && !attrs.AddressLine1) {
        this.modelErrors.AddressLine1 = 'Please enter your address';
      }
      if (typeof attrs.City !== 'undefined' && !attrs.City) {
        this.modelErrors.City = 'Please enter your city';
      }
      if (typeof attrs.State !== 'undefined' && !attrs.State) {
        this.modelErrors.State = 'Please enter your state';
      }
      if (typeof attrs.ZipCode !== 'undefined' && !attrs.ZipCode) {
        this.modelErrors.ZipCode = 'Please enter your zip code';
      }
      if (typeof attrs.Birthdate !== 'undefined' && !/^-{0,1}\d+$/.test(attrs.Birthdate)) {
        this.modelErrors.Birthdate = 'Please enter your birthdate';
      }
      if (typeof attrs.Gender !== 'undefined' && !attrs.Gender) {
        this.modelErrors.Gender = 'Please select your gender';
      }
      if (typeof attrs.CampusID !== 'undefined' && !attrs.CampusID) {
        this.modelErrors.Campus = 'Please select your campus';
      }
      keys = _.keys(this.modelErrors);
      if (_.any(keys)) {
        return this.modelErrors;
      }
    };

    return User;

  })(CentralAZ.UserPortal.Models.AbstractPerson);

  CentralAZ.UserPortal.Presenters.UserPortalPresenter = (function() {

    UserPortalPresenter.prototype.container = '#user-portal';

    function UserPortalPresenter(options) {
      this.ev = options.ev;
      this.model = options.model;
      _.bindAll(this);
      this.bindAppEvents();
      this.bindModelEvents();
    }

    UserPortalPresenter.prototype.bindAppEvents = function() {
      this.ev.on('view:cancel', this.closeModal);
      this.ev.on('errors:show', this.showErrorSummary);
      this.ev.on('errors:close', this.clearErrors);
      this.ev.on('user:view', this.index);
      this.ev.on('user:edit', this.editUser);
      this.ev.on('user:save', this.saveUser);
      this.ev.on('emailAddress:new', this.newEmailAddress);
      this.ev.on('emailAddress:create', this.createEmailAddress);
      this.ev.on('emailAddress:edit', this.editEmailAddress);
      this.ev.on('emailAddress:delete', this.deleteEmailAddress);
      this.ev.on('familyMember:new', this.newFamilyMember);
      this.ev.on('familyMember:create', this.createFamilymember);
      this.ev.on('familyMember:edit', this.editFamilyMember);
      return this.ev.on('familyMember:save emailAddress:save', this.saveModel);
    };

    UserPortalPresenter.prototype.bindModelEvents = function() {
      this.model.on('change:CampusID', this.setSelectedCampus);
      this.model.on('change:Birthdate', this.model.displayDate);
      this.model.on('change:Gender', this.model.displayGender);
      return this.model.get('Family').forEach(function(fm) {
        fm.on('change:Birthdate', fm.displayDate);
        return fm.on('change:Gender', fm.displayGender);
      });
    };

    UserPortalPresenter.prototype.showView = function(view) {
      if (this.currentView) {
        this.currentView.close();
      }
      if (this.modal) {
        this.modal.close();
      }
      this.currentView = view;
      this.currentView.render().$el.appendTo($('#user-portal-container'));
      return this.clearErrors();
    };

    UserPortalPresenter.prototype.showModalView = function(view) {
      if (this.modal) {
        this.modal.close();
      }
      this.modal = view;
      this.modal.render().$el.hide().appendTo($('#user-portal-container')).fadeIn();
      return this.clearErrors();
    };

    UserPortalPresenter.prototype.showErrorSummary = function(model, errors) {
      var err, m, messages, _i, _len, _ref;
      if (this.errorSummary) {
        this.errorSummary.close();
      }
      messages = [];
      _ref = _.values(errors);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        err = _ref[_i];
        messages.push({
          message: err
        });
      }
      m = {
        errors: messages
      };
      this.errorSummary = new CentralAZ.UserPortal.Views.ErrorSummary({
        ev: this.ev,
        model: m
      });
      this.errorSummary.render().$el.hide().appendTo($('#user-portal-container'));
      return this.errorSummary.$el.fadeIn();
    };

    UserPortalPresenter.prototype.closeModal = function() {
      var _this = this;
      if (this.modal) {
        this.modal.$el.fadeOut('normal', function() {
          return _this.modal.close();
        });
      }
      return this.clearErrors();
    };

    UserPortalPresenter.prototype.clearErrors = function() {
      if (this.errorSummary) {
        return this.errorSummary.close();
      }
    };

    UserPortalPresenter.prototype.index = function() {
      var index;
      index = new CentralAZ.UserPortal.Views.Index({
        ev: this.ev,
        model: this.model
      });
      return this.showView(index);
    };

    UserPortalPresenter.prototype.editUser = function() {
      var edit;
      edit = new CentralAZ.UserPortal.Views.Edit({
        ev: this.ev,
        model: this.model
      });
      return this.showView(edit);
    };

    UserPortalPresenter.prototype.saveUser = function(model, attrs) {
      var promise,
        _this = this;
      promise = model.save(attrs);
      if (promise) {
        this.showSpinner();
        promise.done(function() {
          return _this.hideSpinner();
        });
        return this.ev.trigger('user:view');
      }
    };

    UserPortalPresenter.prototype.newFamilyMember = function() {
      var familymemberView, fm;
      fm = new CentralAZ.UserPortal.Models.FamilyMember({
        LastName: this.model.get('LastName')
      });
      familymemberView = new CentralAZ.UserPortal.Views.EditFamilyMember({
        ev: this.ev,
        model: fm
      });
      return this.showModalView(familymemberView);
    };

    UserPortalPresenter.prototype.createFamilymember = function(model, attrs) {
      var promise,
        _this = this;
      promise = model.save(attrs);
      if (promise) {
        this.showSpinner();
        this.closeModal();
        return promise.done(function(res) {
          var family;
          family = _this.model.get('Family');
          family.add(model);
          model.set({
            PersonID: res.d
          });
          return _this.hideSpinner();
        });
      }
    };

    UserPortalPresenter.prototype.editFamilyMember = function(id) {
      var editFm, family, fm;
      family = this.model.get('Family');
      fm = family.get(id);
      editFm = new CentralAZ.UserPortal.Views.EditFamilyMember({
        ev: this.ev,
        model: fm
      });
      return this.showModalView(editFm);
    };

    UserPortalPresenter.prototype.newEmailAddress = function() {
      var email, emailView;
      email = new CentralAZ.UserPortal.Models.EmailAddress();
      emailView = new CentralAZ.UserPortal.Views.EditEmailAddress({
        ev: this.ev,
        model: email
      });
      return this.showModalView(emailView);
    };

    UserPortalPresenter.prototype.createEmailAddress = function(model, attrs) {
      var promise,
        _this = this;
      promise = model.save(attrs);
      if (promise) {
        this.showSpinner();
        this.closeModal();
        return promise.done(function(res) {
          var emails;
          emails = _this.model.get('EmailAddresses');
          emails.add(model);
          model.set({
            EmailID: res.d
          });
          return _this.hideSpinner();
        });
      }
    };

    UserPortalPresenter.prototype.editEmailAddress = function(id) {
      var email, emailView;
      email = this.model.get('EmailAddresses').get(id);
      emailView = new CentralAZ.UserPortal.Views.EditEmailAddress({
        ev: this.ev,
        model: email
      });
      return this.showModalView(emailView);
    };

    UserPortalPresenter.prototype.deleteEmailAddress = function(email) {
      var emailList;
      emailList = this.model.get('EmailAddresses');
      emailList.remove(email);
      email.destroy();
      return this.ev.trigger('user:view');
    };

    UserPortalPresenter.prototype.saveModel = function(model, attrs) {
      var promise,
        _this = this;
      promise = model.save(attrs);
      if (promise) {
        this.showSpinner();
        this.closeModal();
        return promise.done(function() {
          return _this.hideSpinner();
        });
      }
    };

    UserPortalPresenter.prototype.setSelectedCampus = function(user) {
      var newID;
      newID = user.get('CampusID');
      return CentralAZ.UserPortal.campuses.forEach(function(campus) {
        var id;
        id = campus.get('campusID');
        if (id === newID) {
          return campus.set({
            selected: true
          });
        } else {
          return campus.set({
            selected: false
          });
        }
      });
    };

    UserPortalPresenter.prototype.showSpinner = function() {
      if (this.spinner) {

      } else {
        this.spinner = new CentralAZ.UserPortal.Views.Spinner();
        return this.spinner.render().$el.hide().appendTo('#user-portal-container').fadeIn();
      }
    };

    UserPortalPresenter.prototype.hideSpinner = function() {
      var _this = this;
      if (this.spinner) {
        return this.spinner.$el.fadeOut('normal', function() {
          _this.spinner.close();
          return _this.spinner = null;
        });
      }
    };

    return UserPortalPresenter;

  })();

  CentralAZ.UserPortal.Routers.UserInfoRouter = (function(_super) {

    __extends(UserInfoRouter, _super);

    function UserInfoRouter() {
      return UserInfoRouter.__super__.constructor.apply(this, arguments);
    }

    UserInfoRouter.prototype.routes = {
      '': 'index',
      '*options': 'index'
    };

    UserInfoRouter.prototype.initialize = function(options) {
      this.presenter = new CentralAZ.UserPortal.Presenters.UserPortalPresenter(options);
      this.ev = options.ev;
      return _.bindAll(this);
    };

    UserInfoRouter.prototype.index = function() {
      return this.presenter.index();
    };

    return UserInfoRouter;

  })(Backbone.Router);

  CentralAZ.UserPortal.Views.Campus = (function(_super) {

    __extends(Campus, _super);

    function Campus() {
      return Campus.__super__.constructor.apply(this, arguments);
    }

    Campus.prototype.tagName = 'div';

    Campus.prototype.template = 'campus';

    Campus.prototype.initialize = function(options) {
      this.ev = options.ev;
      this.model = options.model;
      return _.bindAll(this);
    };

    Campus.prototype.render = function() {
      return this.fromTemplate();
    };

    return Campus;

  })(Backbone.View);

  CentralAZ.UserPortal.Views.CampusSelect = (function(_super) {

    __extends(CampusSelect, _super);

    function CampusSelect() {
      return CampusSelect.__super__.constructor.apply(this, arguments);
    }

    CampusSelect.prototype.tagName = 'li';

    CampusSelect.prototype.template = 'campus-select';

    CampusSelect.prototype.events = {
      'click .campus': 'campusSelected'
    };

    CampusSelect.prototype.initialize = function(options) {
      this.ev = options.ev;
      this.model = options.model;
      return _.bindAll(this);
    };

    CampusSelect.prototype.render = function() {
      return this.fromTemplate();
    };

    CampusSelect.prototype.campusSelected = function() {
      this.ev.trigger('campus:change', this.model);
      return true;
    };

    return CampusSelect;

  })(Backbone.View);

  CentralAZ.UserPortal.Views.Edit = (function(_super) {

    __extends(Edit, _super);

    function Edit() {
      return Edit.__super__.constructor.apply(this, arguments);
    }

    Edit.prototype.tagName = 'div';

    Edit.prototype.className = 'edit-details';

    Edit.prototype.template = 'edit-user-info';

    Edit.prototype.events = {
      'click .user-save': 'saveClicked',
      'click .cancel': 'cancelClicked',
      'mouseenter #address': 'showTooltip',
      'mouseleave #address': 'hideTooltip'
    };

    Edit.prototype.initialize = function(options) {
      this.ev = options.ev;
      this.model = options.model;
      this.initChildViews();
      this.selectedCampus = CentralAZ.UserPortal.campuses.get(this.model.get('CampusID'));
      _.bindAll(this);
      this.ev.on('campus:change', this.campusChanged);
      this.ev.on('view:rendered', this.renderFinished);
      return this.model.on('error', this.onModelError);
    };

    Edit.prototype.render = function() {
      var _this = this;
      CentralAZ.UserPortal.Helpers.TemplateManager.get(this.template, function(tmp) {
        var html, json;
        json = _this.model.toJSON();
        json.Campus = _this.model.get('Campus') ? _this.model.get('Campus').toJSON() : null;
        html = Mustache.to_html(tmp, json);
        _this.$el.html(html);
        return _this.onRenderComplete();
      });
      return this;
    };

    Edit.prototype.initChildViews = function() {
      var _this = this;
      this.childViews = [];
      return CentralAZ.UserPortal.campuses.forEach(function(campus) {
        var view;
        view = new CentralAZ.UserPortal.Views.CampusSelect({
          ev: _this.ev,
          model: campus
        });
        return _this.childViews.push(view);
      });
    };

    Edit.prototype.onRenderComplete = function() {
      var $ul, lastID,
        _this = this;
      $ul = this.$el.find('#campus-picker');
      lastID = CentralAZ.UserPortal.campuses.last().get('campusID');
      return _.each(this.childViews, function(view) {
        var id;
        $ul.append(view.render().$el);
        id = view.model.get('campusID');
        if (id === lastID) {
          return _this.bindUi();
        }
      });
    };

    Edit.prototype.bindUi = function() {
      var $ul, timer;
      $ul = this.$el.find('#campus-picker');
      this.$el.find('#birthdate').datepicker({
        showOn: 'button',
        buttonImage: 'usercontrols/custom/cccev/core/images/calendar-icon.png',
        buttonImageOnly: true,
        changeMonth: true,
        changeYear: true
      });
      this.$el.find('#gender').buttonset();
      this.$el.find('.phone-options').buttonset();
      return timer = setInterval(function() {
        if (!$ul.find('label.campus').hasClass('ui-widget')) {
          return $ul.buttonset();
        } else {
          return clearInterval(timer);
        }
      }, 10);
    };

    Edit.prototype.campusChanged = function(campus) {
      return this.selectedCampus = campus;
    };

    Edit.prototype.saveClicked = function() {
      var attrs, birthdate;
      birthdate = new Date(Date.parse(this.$el.find('#birthdate').val()));
      attrs = {
        FirstName: this.$el.find('#first-name').val(),
        LastName: this.$el.find('#last-name').val(),
        Birthdate: birthdate.getTime(),
        Gender: this.$el.find('[name="gender"]:checked').val() || null,
        HomePhone: this.$el.find('#home-phone').val(),
        IsHomeUnlisted: this.$el.find('#home-unlisted').is(':checked'),
        IsHomeSms: this.$el.find('#home-sms').is(':checked'),
        MobilePhone: this.$el.find('#mobile-phone').val(),
        IsMobileUnlisted: this.$el.find('#mobile-unlisted').is(':checked'),
        IsMobileSms: this.$el.find('#mobile-sms').is(':checked'),
        Campus: this.selectedCampus,
        CampusID: this.selectedCampus.get('campusID')
      };
      this.ev.trigger('user:save', this.model, attrs);
      return false;
    };

    Edit.prototype.cancelClicked = function() {
      this.ev.trigger('user:view');
      return false;
    };

    Edit.prototype.showTooltip = function(e) {
      $(e.currentTarget).find('.tool-tip').fadeIn();
      return false;
    };

    Edit.prototype.hideTooltip = function(e) {
      $(e.currentTarget).find('.tool-tip').fadeOut();
      return false;
    };

    Edit.prototype.onClose = function() {
      this.ev.off('campus:change');
      this.ev.off('view:rendered');
      this.model.off('error');
      return _.each(this.childViews, function(view) {
        return view.close();
      });
    };

    return Edit;

  })(Backbone.View);

  CentralAZ.UserPortal.Views.EditEmailAddress = (function(_super) {

    __extends(EditEmailAddress, _super);

    function EditEmailAddress() {
      return EditEmailAddress.__super__.constructor.apply(this, arguments);
    }

    EditEmailAddress.prototype.tagName = 'div';

    EditEmailAddress.prototype.className = 'edit-email-address';

    EditEmailAddress.prototype.template = 'edit-email-address';

    EditEmailAddress.prototype.events = {
      'click .ea-save': 'saveClicked',
      'click .ea-cancel, .ea-close': 'cancelClicked'
    };

    EditEmailAddress.prototype.initialize = function(options) {
      this.model = options.model;
      this.ev = options.ev;
      _.bindAll(this);
      return this.model.on('error', this.onModelError);
    };

    EditEmailAddress.prototype.render = function() {
      return this.fromTemplate();
    };

    EditEmailAddress.prototype.saveClicked = function() {
      var action, attrs;
      attrs = {
        Address: this.$el.find('#email-address').val(),
        Active: this.$el.find('#active').is(':checked')
      };
      action = this.model.isNew() ? 'create' : 'save';
      this.ev.trigger("emailAddress:" + action, this.model, attrs);
      return false;
    };

    EditEmailAddress.prototype.cancelClicked = function() {
      this.ev.trigger('view:cancel');
      return false;
    };

    EditEmailAddress.prototype.onClose = function() {
      return this.model.off('error');
    };

    return EditEmailAddress;

  })(Backbone.View);

  CentralAZ.UserPortal.Views.EditFamilyMember = (function(_super) {

    __extends(EditFamilyMember, _super);

    function EditFamilyMember() {
      return EditFamilyMember.__super__.constructor.apply(this, arguments);
    }

    EditFamilyMember.prototype.tagName = 'div';

    EditFamilyMember.prototype.className = 'edit-family-member';

    EditFamilyMember.prototype.template = 'edit-family-member';

    EditFamilyMember.prototype.events = {
      'click .fm-save': 'saveClicked',
      'click .fm-cancel, .fm-close': 'cancelClicked'
    };

    EditFamilyMember.prototype.initialize = function(options) {
      this.ev = options.ev;
      this.model = options.model;
      _.bindAll(this);
      return this.model.on('error', this.onModelError);
    };

    EditFamilyMember.prototype.render = function() {
      var _this = this;
      CentralAZ.UserPortal.Helpers.TemplateManager.get(this.template, function(tmp) {
        var html;
        html = Mustache.to_html(tmp, _this.model.toJSON());
        _this.$el.html(html);
        return _this.onRenderComplete();
      });
      return this;
    };

    EditFamilyMember.prototype.onRenderComplete = function() {
      this.$el.find('.fm-gender').buttonset();
      return this.$el.find('#birthdate').datepicker({
        showOn: 'button',
        buttonImage: 'usercontrols/custom/cccev/core/images/calendar-icon.png',
        buttonImageOnly: true,
        changeMonth: true,
        changeYear: true
      });
    };

    EditFamilyMember.prototype.saveClicked = function() {
      var action, attrs, birthdate;
      birthdate = new Date(Date.parse(this.$el.find('#birthdate').val()));
      attrs = {
        FirstName: this.$el.find('#first-name').val(),
        LastName: this.$el.find('#last-name').val(),
        Birthdate: birthdate.getTime(),
        Gender: this.$el.find('[name="gender"]:checked').val() || null
      };
      action = this.model.isNew() ? 'create' : 'save';
      this.ev.trigger("familyMember:" + action, this.model, attrs);
      return false;
    };

    EditFamilyMember.prototype.cancelClicked = function() {
      this.ev.trigger('view:cancel');
      return false;
    };

    EditFamilyMember.prototype.onClose = function() {
      return this.model.off('error');
    };

    return EditFamilyMember;

  })(Backbone.View);

  CentralAZ.UserPortal.Views.EmailAddress = (function(_super) {

    __extends(EmailAddress, _super);

    function EmailAddress() {
      return EmailAddress.__super__.constructor.apply(this, arguments);
    }

    EmailAddress.prototype.tagName = 'tr';

    EmailAddress.prototype.template = 'email-address';

    EmailAddress.prototype.events = {
      'click .ea-edit': 'editClicked',
      'click .ea-delete': 'deleteClicked'
    };

    EmailAddress.prototype.initialize = function(options) {
      this.ev = options.ev;
      this.model = options.model;
      this.parent = options.parent;
      _.bindAll(this);
      return this.model.on('change', this.onChanged);
    };

    EmailAddress.prototype.render = function() {
      return this.fromTemplate();
    };

    EmailAddress.prototype.editClicked = function(e) {
      var id;
      id = $(e.currentTarget).attr('data-id');
      this.ev.trigger('emailAddress:edit', parseInt(id));
      return false;
    };

    EmailAddress.prototype.deleteClicked = function() {
      if (confirm("Are you sure you want to remove '" + (this.model.get('Address')) + "' from your profile?")) {
        this.ev.trigger('emailAddress:delete', this.model);
      }
      return false;
    };

    EmailAddress.prototype.onChanged = function() {
      console.log('changed!');
      return this.render();
    };

    EmailAddress.prototype.onClose = function() {
      return this.model.off('change');
    };

    return EmailAddress;

  })(Backbone.View);

  CentralAZ.UserPortal.Views.ErrorSummary = (function(_super) {

    __extends(ErrorSummary, _super);

    function ErrorSummary() {
      return ErrorSummary.__super__.constructor.apply(this, arguments);
    }

    ErrorSummary.prototype.className = 'ui-widget ui-state-error ui-corner-all';

    ErrorSummary.prototype.template = 'error-summary';

    ErrorSummary.prototype.events = {
      'click .close': 'closeClicked'
    };

    ErrorSummary.prototype.initialize = function(options) {
      this.ev = options.ev;
      this.model = options.model;
      return _.bindAll(this);
    };

    ErrorSummary.prototype.render = function() {
      var _this = this;
      CentralAZ.UserPortal.Helpers.TemplateManager.get(this.template, function(tmp) {
        var html;
        html = Mustache.to_html(tmp, _this.model);
        return _this.$el.html(html);
      });
      return this;
    };

    ErrorSummary.prototype.closeClicked = function() {
      this.ev.trigger('errors:close');
      return false;
    };

    return ErrorSummary;

  })(Backbone.View);

  CentralAZ.UserPortal.Views.FamilyMember = (function(_super) {

    __extends(FamilyMember, _super);

    function FamilyMember() {
      return FamilyMember.__super__.constructor.apply(this, arguments);
    }

    FamilyMember.prototype.tagName = 'tr';

    FamilyMember.prototype.template = 'family-member';

    FamilyMember.prototype.events = {
      'click .fm-edit': 'editClicked'
    };

    FamilyMember.prototype.initialize = function(options) {
      this.ev = options.ev;
      this.model = options.model;
      this.parent = options.parent;
      _.bindAll(this);
      return this.model.on('change', this.onChanged);
    };

    FamilyMember.prototype.render = function() {
      return this.fromTemplate();
    };

    FamilyMember.prototype.editClicked = function(e) {
      var id;
      id = $(e.currentTarget).attr('data-id');
      this.ev.trigger('familyMember:edit', parseInt(id));
      return false;
    };

    FamilyMember.prototype.onChanged = function() {
      return this.render();
    };

    FamilyMember.prototype.onClose = function() {
      return this.model.off('change');
    };

    return FamilyMember;

  })(Backbone.View);

  CentralAZ.UserPortal.Views.Index = (function(_super) {

    __extends(Index, _super);

    function Index() {
      return Index.__super__.constructor.apply(this, arguments);
    }

    Index.prototype.tagName = 'div';

    Index.prototype.className = 'user-details';

    Index.prototype.template = 'user-info';

    Index.prototype.events = {
      'click .edit, .campus': 'editClicked',
      'click .ea-add': 'emailAddClicked',
      'click .fm-add': 'familyAddClicked'
    };

    Index.prototype.initialize = function(options) {
      this.ev = options.ev;
      this.model = options.model;
      this.family = this.model.get('Family');
      this.emails = this.model.get('EmailAddresses');
      this.initFamilyMembers();
      this.initEmailAddresses();
      _.bindAll(this);
      this.family.on('add', this.familyMemberAdded);
      this.emails.on('add', this.emailAdded);
      return this.emails.on('remove', this.emailRemoved);
    };

    Index.prototype.render = function() {
      var _this = this;
      CentralAZ.UserPortal.Helpers.TemplateManager.get(this.template, function(tmp) {
        var html;
        html = Mustache.to_html(tmp, _this.model.toJSON());
        _this.$el.html(html);
        return _this.onRenderComplete();
      });
      return this;
    };

    Index.prototype.onRenderComplete = function() {
      var timer,
        _this = this;
      this.renderChildren(this.familyViews, '#family-members tbody');
      this.renderChildren(this.emailViews, '#email-addresses tbody');
      return timer = setInterval(function() {
        var campus, campusView;
        campus = _this.model.get('Campus');
        if (campus) {
          campusView = new CentralAZ.UserPortal.Views.Campus({
            ev: _this.ev,
            model: _this.model.get('Campus')
          });
          _this.$el.find('.avatar').append(campusView.render().$el);
          return clearInterval(timer);
        }
      }, 10);
    };

    Index.prototype.renderChildren = function(array, selector) {
      var $container;
      $container = this.$el.find(selector);
      return _.each(array, function(view) {
        return $container.append(view.render().$el);
      });
    };

    Index.prototype.editClicked = function() {
      this.ev.trigger('user:edit');
      return false;
    };

    Index.prototype.emailAddClicked = function() {
      this.ev.trigger('emailAddress:new');
      return false;
    };

    Index.prototype.familyAddClicked = function() {
      this.ev.trigger('familyMember:new');
      return false;
    };

    Index.prototype.onClose = function() {
      _.each(this.familyViews, function(view) {
        return view.close();
      });
      _.each(this.emailViews, function(view) {
        return view.close();
      });
      this.emails.off('add remove');
      return this.family.off('add');
    };

    Index.prototype.initFamilyMembers = function() {
      var _this = this;
      this.familyViews = [];
      return this.family.each(function(fm) {
        return _this.familyViews.push(new CentralAZ.UserPortal.Views.FamilyMember({
          ev: _this.ev,
          model: fm,
          parent: _this
        }));
      });
    };

    Index.prototype.initEmailAddresses = function() {
      var _this = this;
      this.emailViews = [];
      return this.emails.each(function(email) {
        return _this.emailViews.push(new CentralAZ.UserPortal.Views.EmailAddress({
          ev: _this.ev,
          model: email,
          parent: _this
        }));
      });
    };

    Index.prototype.familyMemberAdded = function(familyMember) {
      this.familyViews.push(new CentralAZ.UserPortal.Views.FamilyMember({
        ev: this.ev,
        model: familyMember,
        parent: this
      }));
      return this.render();
    };

    Index.prototype.emailAdded = function(email) {
      this.emailViews.push(new CentralAZ.UserPortal.Views.EmailAddress({
        ev: this.ev,
        model: email,
        parent: this
      }));
      return this.render();
    };

    Index.prototype.emailRemoved = function(email) {
      var view,
        _this = this;
      view = _.select(this.emailViews, function(v) {
        return v.model.get('EmailID' === email.get('EmailID'));
      });
      if (view.length > 0) {
        this.emailViews.pop(view[0]);
      }
      return this.render();
    };

    return Index;

  })(Backbone.View);

  CentralAZ.UserPortal.Views.Spinner = (function(_super) {

    __extends(Spinner, _super);

    function Spinner() {
      return Spinner.__super__.constructor.apply(this, arguments);
    }

    Spinner.prototype.className = 'spinner';

    Spinner.prototype.render = function() {
      return this;
    };

    return Spinner;

  })(Backbone.View);

}).call(this);
